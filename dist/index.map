{"version":3,"sources":["screencapture.js","pick.js","ipcMainHandler.js","index.js"],"names":["global","html2canvas","canvas","obj","onrendered","getStream","Promise","resolve","reject","getSources","types","error","sources","display","getDisplay","sourceId","displayIndex","screen","getAllDisplays","item","id","navigator","webkitGetUserMedia","audio","video","mandatory","chromeMediaSource","chromeMediaSourceId","maxWidth","size","width","maxHeight","height","minWidth","minHeight","getVideo","document","createElement","autoplay","src","URL","createObjectURL","stream","addEventListener","getCanvas","drawFrame","ctx","x","y","availTop","drawImage","getFrameImage","toDataURL","console","log","getLoop","requestId","callFn","requestAnimationFrame","fn","cancelAnimationFrame","startRecording","recorder","type","getContext","stopLoop","stop","stopRecording","getDataURL","url","pause","pauseRecording","resume","resumeRecording","takeScreenshot","bounds","then","captureVideo","require","remote","ipcMain","BrowserWindow","path","ipc","ipcRenderer","desktopCapturer","win","exports","pick","replace","transparent","frame","toolbar","setSimpleFullScreen","show","loadURL","join","process","cwd","webContents","on","send","result","event","message","pixels","JSON","parse","data","rgbBox","getElementById","rgbValues","innerHTML","style","backgroundColor","ipcMainHandler","stringify"],"mappings":"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","file":"index.map","sourcesContent":["import RecordRTC from \"recordrtc\";\nimport electron, { desktopCapturer } from \"electron\";\nimport find from \"array-find\";\nimport findIndex from \"lodash.findindex\";\n\n/* This is NEEDED because RecordRTC is badly written */\nglobal.html2canvas = (canvas, obj) => {\n  obj.onrendered(canvas);\n};\n\nconst getStream = sourceId => {\n  return new Promise((resolve, reject) => {\n    desktopCapturer.getSources({ types: [\"screen\"] }, (error, sources) => {\n      if (error) {\n        reject(error);\n        return;\n      }\n\n      const display = getDisplay(sourceId);\n      const displayIndex = findIndex(\n        electron.screen.getAllDisplays(),\n        item => item.id == sourceId\n      );\n\n      navigator.webkitGetUserMedia(\n        {\n          audio: false,\n          video: {\n            mandatory: {\n              chromeMediaSource: \"desktop\",\n              chromeMediaSourceId: sources[displayIndex].id,\n              maxWidth: display.size.width,\n              maxHeight: display.size.height,\n              minWidth: display.size.width,\n              minHeight: display.size.height\n            }\n          }\n        },\n        resolve,\n        reject\n      );\n    });\n  });\n};\n\nconst getVideo = stream => {\n  const video = document.createElement(\"video\");\n  video.autoplay = true;\n  video.src = URL.createObjectURL(stream);\n  return new Promise(resolve => {\n    video.addEventListener(\"playing\", () => {\n      resolve(video);\n    });\n  });\n};\n\nconst getCanvas = (width, height) => {\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = width;\n  canvas.height = height;\n  return canvas;\n};\n\nconst drawFrame = ({\n  ctx,\n  video,\n  x,\n  y,\n  width,\n  height,\n  availTop = screen.availTop\n}) => {\n  ctx.drawImage(video, x, y, width, height, 0, -availTop, width, height);\n};\n\nconst getFrameImage = canvas => {\n  return canvas.toDataURL();\n};\n\nconst getDisplay = id => {\n  const x = find(electron.screen.getAllDisplays(), item => {\n    console.log(item.id, id);\n    return item.id == id;\n  });\n\n  return x;\n};\n\nconst getLoop = fn => {\n  let requestId;\n  const callFn = () => {\n    requestId = requestAnimationFrame(callFn);\n    fn();\n  };\n  callFn();\n  return () => {\n    cancelAnimationFrame(requestId);\n  };\n};\n\nconst startRecording = ({ canvas, video, x, y, width, height, availTop }) => {\n  const recorder = RecordRTC(canvas, { type: \"canvas\" });\n  const ctx = canvas.getContext(\"2d\");\n  const stopLoop = getLoop(() =>\n    drawFrame({ ctx, video, x, y, width, height, availTop })\n  );\n\n  recorder.startRecording();\n\n  return {\n    stop() {\n      return new Promise(resolve => {\n        stopLoop();\n        recorder.stopRecording(() => {\n          recorder.getDataURL(url => resolve({ url, width, height }));\n        });\n      });\n    },\n    pause() {\n      recorder.pauseRecording();\n    },\n    resume() {\n      recorder.resumeRecording();\n    }\n  };\n};\n\nexport const takeScreenshot = ({ x, y, width, height, sourceId }) => {\n  //const availTop = screen.availTop - getDisplay(sourceId).bounds.y;\n\n  const display = getDisplay(sourceId);\n\n  if (typeof x == \"undefined\") x = display.bounds.x;\n  if (typeof y == \"undefined\") y = display.bounds.y;\n  if (typeof width == \"undefined\") width = display.bounds.width;\n  if (typeof height == \"undefined\") height = display.bounds.height;\n\n  const availTop = 0;\n\n  return getStream(sourceId)\n    .then(getVideo)\n    .then(video => {\n      const canvas = getCanvas(width, height);\n      const ctx = canvas.getContext(\"2d\");\n      drawFrame({ ctx, video, x, y, width, height, availTop });\n      return getFrameImage(canvas);\n    });\n};\n\nexport const captureVideo = ({ x, y, width, height, sourceId }) => {\n  const availTop = screen.availTop - getDisplay(sourceId).bounds.y;\n  return getStream(sourceId)\n    .then(getVideo)\n    .then(video => {\n      const canvas = getCanvas(width, height);\n      return startRecording({ canvas, video, x, y, width, height, availTop });\n    });\n};\n","\n\nconst { remote } = require(\"electron\");\n// var robot = require (\"robot-js\");\nconst ipcMain = require('electron').ipcMain;\nconst { BrowserWindow } = remote;\nconst path = require('path')\nconst url = require('url');\nconst ipc = require('electron').ipcRenderer;\n// const ipcMain = require('electron').ipcMain;\nconst { desktopCapturer } = require(\"electron\");\nimport { takeScreenshot } from \"./screencapture\";\nconsole.log(ipcMain, 'ipc');\n\nlet win;\nexports.pick = function () {\n  return new Promise((resolve, reject) => {\n\n    desktopCapturer.getSources({ types: [\"screen\"] }, (error, sources) => {\n      if (error) throw error;\n\n      takeScreenshot({\n        sourceId: sources[0].id.replace(\"screen:\", \"\")\n      }).then(result => {\n          win = new BrowserWindow({\n            transparent: true,\n            frame: false,\n            toolbar: true,\n          });\n          win.setSimpleFullScreen(true);\n          win.show();\n          win.loadURL(path.join('file://', process.cwd(), 'src/screenshot.html'));\n          win.webContents.on('did-finish-load', () => {\n            win.webContents.send('screenshot', result)\n          });\n        });\n    });\n    // win.on('closed', () => {\n    //   win = null\n    // })\n    ipc.on('clickedPixels', (event, message) => {\n      const pixels = JSON.parse(message).data;\n      console.log(pixels, 'pixels selected');\n      let rgbBox = document.getElementById('rgb-color-box');\n      let rgbValues = document.getElementById('rgb-values');\n      rgbValues.innerHTML = `rgba(${pixels[0]},${pixels[1]}, ${pixels[2]}, ${pixels[3]})`\n      rgbBox.style.display = \"inline-block\";\n      rgbBox.style.backgroundColor = `rgba(${pixels[0]},${pixels[1]}, ${pixels[2]}, ${pixels[3]})`;\n      resolve(pixels);\n    });\n\n  });\n}\n","\n  const ipc = require('electron').ipcMain;\n\n  exports.ipcMainHandler = function (win) {\n    ipc.on('clickedPixels', (event, message) => {\n      win.webContents.send('clickedPixels', JSON.stringify(message));\n    })\n  };\n\n","var {pick} = require('./pick');\nvar {ipcMainHandler} = require('./ipcMainHandler');\n\nexports.pick = pick;\nexports.ipcMainHandler = ipcMainHandler;\n"]}